{include://carousel_pre_start.inc}
<div id="{object_id}" class="carousel slide {include://carousel_type.inc} {include://carousel_height.inc} {include://color_bg.inc} {include://color_text.inc}" data-bs-ride="carousel">
    {include://carousel_post_start.inc}
    <!-- Lower indicators -->
    <div class="carousel-indicators">
        <!-- This will be dynamically generated by the script below -->
    </div>
    <div class="carousel-inner">
        {children}
    </div>
   
    <!-- Next/Prev Buttons -->
    <button class="carousel-control-prev" type="button" data-bs-target="#{object_id}" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#{object_id}" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>

    <!-- Script to connect indicators to slides -->
     <script>
        var scriptTag = document.currentScript;
        var parentElement = scriptTag.parentElement;
        var carouselItems = parentElement.getElementsByClassName('carousel-inner')[0].querySelectorAll('.carousel-item');
        var indicatorsContainer = parentElement.querySelector('.carousel-indicators');

        if (carouselItems.length > 0) {
            // Add active class to the first item
            carouselItems[0].classList.add('active');

            // Fix up slide HTML (can't be done in editor)
            for (var i = 0; i < carouselItems.length; i++) {
                // (1) Check if the first child of carousel-caption is an image and move it to be a child of the carousel-item
                var caption = carouselItems[i].querySelector('.carousel-caption');
                if (caption && caption.firstElementChild && caption.firstElementChild.tagName === 'IMG') {
                    var img = caption.firstElementChild;
                    caption.removeChild(img);
                    carouselItems[i].insertBefore(img, caption); // Move the image to be a direct child of the carousel-item
                }
            }
        }

        // Generate indicators
        if (carouselItems.length > 1) {
            for (var i = 0; i < carouselItems.length; i++) {
                var indicator = document.createElement('button');
                indicator.type = 'button';
                indicator.setAttribute('data-bs-target', '#{object_id}');
                indicator.setAttribute('data-bs-slide-to', i.toString());

                // Set active and aria-current only for the first item
                if (i === 0) {
                    indicator.classList.add('active');
                    indicator.setAttribute('aria-current', 'true');
                }

                indicator.setAttribute('aria-label', 'Slide ' + (i + 1));
                indicatorsContainer.appendChild(indicator);
            }
        } else {
            // Remove Slide Navigation
            var controlButtons = parentElement.querySelectorAll(".carousel-indicators, .carousel-control-prev, .carousel-control-next");
            for(var button of controlButtons) {
                button.remove();
            }
        }

        scriptTag.remove(); // You can uncomment this to remove the script after execution
    </script>
    {include://shape.inc}
    {include://carousel_pre_end.inc}
</div>
{include://carousel_post_end.inc}
